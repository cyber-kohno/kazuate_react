{"version":3,"sources":["app/sample/sample2/component/Button.tsx","app/sample/sample2/component/Style.tsx","app/sample/sample2/mode/Play.tsx","app/sample/sample2/Sample2.tsx","app/sample/sample2/mode/Result.tsx","app/sample/sample2/mode/Top.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","_Style","styled","div","backgroundColor","width","height","margin","join","isEnable","css","fontSize","fontColor","adjsustHead","onClick","callback","labelName","defaultProps","_Record","padding","textAlign","_Hide","opacity","_Text","span","color","fontWeight","PlayStatus","Play","useState","tryCnt","setTryCnt","min","setMin","max","setMax","correct","setCorrect","userInput","setUserInput","message","setMessage","useReducer","list","record","ret","slice","push","histories","addHistories","useEffect","range","Math","floor","random","updateMessage","isInputOK","parseInt","historyJSXList","forEach","i","_History","input","len","_Wrap","_Info","_Form","type","value","onChange","e","target","isError","transitionResult","try","Result","resultBean","transitionTop","Top","setRange","rangeOptionJSXList","_Title","_Combobox","transitionPlay","select","Sample2","TOP","status","setStatus","setResultBean","_Background","_MainPanel","_Status","isActive","PLAY","RESULT","_ContentsPanel","_resultBean","getContentsJSX","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca942c89.chunk.js","sourcesContent":["import { useMemo } from \"react\";\r\nimport { VFC } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport type ButtonProps = {\r\n    labelName: string;\r\n    backgroundColor: string;\r\n    width: null | number;\r\n    height: number;\r\n    margin: number[];\r\n    fontColor: string;\r\n    fontSize: number;\r\n    adjsustHead: number;\r\n    isEnable: boolean;\r\n    callback: Function;\r\n}\r\n\r\nconst Button = (props: ButtonProps) => {\r\n\r\n    const _Style = styled.div`\r\n        display: inline-block;\r\n        background-color: ${props.backgroundColor};\r\n        /* ${props.width != null ? props.width + 'px;' : ''} */\r\n        width: 200px;\r\n        height: ${props.height}px;\r\n        text-align: center;\r\n        margin: ${props.margin.join('px ')};\r\n        border-radius: 4px;\r\n        border: solid 1px #0000002b;\r\n        ${props.isEnable ? css`\r\n            pointer-events: none;\r\n            opacity: 0.4;\r\n        ` : ''}\r\n        & span {\r\n            display: inline-block;\r\n            font-size: ${props.fontSize}px;\r\n            font-weight: 600;\r\n            color: ${props.fontColor};\r\n            margin-top: ${props.adjsustHead}px;\r\n            pointer-events: none;\r\n        }\r\n        &:hover {\r\n            opacity: 0.7;\r\n            /* background-color: yellow; */\r\n        }\r\n    `;\r\n\r\n    return (\r\n        <_Style\r\n            onClick={()=>{\r\n                props.callback();\r\n            }}>\r\n            <span>{props.labelName}</span>\r\n        </_Style>\r\n    );\r\n}\r\n\r\nButton.defaultProps = {\r\n    isEnable: false,\r\n  };\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\n\r\n\r\nexport const _Record = styled.div<{\r\n    backgroundColor?: string,\r\n    textAlign?: string,\r\n    padding?: string,\r\n    margin?: string,\r\n}>`\r\n    display: inline-block;\r\n    background-color: ${(props) => props.backgroundColor};\r\n    width: 100%;\r\n    padding: ${(props) => props.padding};\r\n    margin: ${(props) => props.margin};\r\n    text-align: ${(props) => props.textAlign};\r\n    box-sizing: border-box;\r\n`;\r\n_Record.defaultProps = {\r\n    backgroundColor: 'inherit',\r\n    textAlign: 'inherit',\r\n    padding: '0',\r\n    margin: '0'\r\n}\r\n\r\nexport const _Hide = styled.div`\r\n    opacity: ${(props: { opacity: number }) => props.opacity}\r\n`;\r\n\r\nexport const _Text = styled.span<{\r\n    fontSize?: string,\r\n    color?: string,\r\n    fontWeight?: string\r\n}>`\r\n    font-size: ${(props)=> props.fontSize};\r\n    color: ${(props)=> props.color};\r\n    font-weight: ${(props)=> props.fontWeight};\r\n`;\r\n_Text.defaultProps = {\r\n    fontSize: 'inherit',\r\n    color: 'inherit',\r\n    fontWeight: 'inherit'\r\n}","import { useEffect, useReducer } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { VFC } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { NumberLiteralType } from \"typescript\";\r\nimport Button from \"../component/Button\";\r\nimport { _Hide, _Record, _Text } from \"../component/Style\";\r\nimport { PlayStatus, ResultBean } from \"../Sample2\";\r\n\r\ntype History = { len: 'under' | 'over', input: number };\r\n\r\nconst Play = (props: {\r\n    transitionResult: (resultBean: ResultBean) => void,\r\n    range: number\r\n}) => {\r\n\r\n    const [tryCnt, setTryCnt] = useState<number>(0);\r\n    const [min, setMin] = useState<number>(0);\r\n    const [max, setMax] = useState<number>(0);\r\n    const [correct, setCorrect] = useState<number>(0);\r\n    const [userInput, setUserInput] = useState<string>('');\r\n    const [message, setMessage] = useState<JSX.Element>();\r\n\r\n    const [histories, addHistories] = useReducer((list: History[], record: History) => {\r\n        const ret = list.slice();\r\n        ret.push(record);\r\n        return ret;\r\n    }, [] as History[]);\r\n\r\n    useEffect(() => {\r\n        setTryCnt(1);\r\n        setMin(0);\r\n        setMax(props.range);\r\n        setCorrect(Math.floor(Math.random() * props.range));\r\n    }, [props.range]);\r\n\r\n    useEffect(() => {\r\n        updateMessage();\r\n    }, [tryCnt]);\r\n\r\n    const updateMessage = () => {\r\n        setMessage(\r\n            <div>\r\n                <_Text color=\"#0600a6\">Please! input number...</_Text><br />\r\n                Try: [<_Text color=\"#a60000\">{tryCnt}</_Text>]<br />\r\n                Min: [<_Text color=\"#a60000\">{min}</_Text>]～Max: [<_Text color=\"#a60000\">{max}</_Text>]<br />\r\n                <_Hide opacity={0.1}>correct: [<_Text color=\"#0600a6\">{correct}</_Text>]</_Hide>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const isInputOK = (\r\n        userInput != '' &&\r\n        parseInt(userInput) >= min && parseInt(userInput) <= max\r\n    );\r\n\r\n    const historyJSXList: JSX.Element[] = [];\r\n    histories.forEach((record, i) => {\r\n        historyJSXList.push(\r\n            <_History key={i}>\r\n                Try: [<_Text color=\"#a60000\">{i + 1}</_Text>]\r\n                Input: [<_Text color=\"#a60000\">{record.input}</_Text>]\r\n                Judge: [<_Text color=\"#a60000\">{record.len}</_Text>]\r\n            </_History>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <_Wrap>\r\n            <_Record padding=\"0 0 0 10px\" textAlign=\"left\">\r\n                <_Text fontSize=\"18px\" fontWeight=\"600\" color=\"#8f8e8e\">Information</_Text>\r\n            </_Record>\r\n            <_Record padding=\"1px 10px 10px 5px\">\r\n                <_Info>{message}</_Info>\r\n            </_Record>\r\n            <_Record backgroundColor='#e2e2e2' padding=\"10px\">\r\n                <_Form\r\n                    type=\"number\"\r\n                    value={userInput}\r\n                    onChange={(e) => {\r\n                        setUserInput(e.target.value);\r\n                    }}\r\n                    min={min}\r\n                    max={max}\r\n                    isError={isInputOK}\r\n                />\r\n            </_Record>\r\n            <_Record backgroundColor='#e2e2e2' padding=\"10px\">\r\n                <Button\r\n                    labelName=\"Enter\"\r\n                    backgroundColor=\"#b4b4b492\"\r\n                    width={150}\r\n                    height={40}\r\n                    fontColor=\"#8a8a8a\"\r\n                    fontSize={28}\r\n                    margin={[0, 0, 0, 0]}\r\n                    adjsustHead={-1}\r\n                    isEnable={!isInputOK}\r\n                    callback={() => {\r\n                        const value = parseInt(userInput);\r\n                        if (value === correct) {\r\n                            props.transitionResult({ correct, try: tryCnt });\r\n                        } else {\r\n                            if (value < correct) {\r\n                                setMin(value + 1);\r\n                            } else if (value > correct) {\r\n                                setMax(value - 1);\r\n                            }\r\n                            addHistories({ len: (value < correct ? 'under' : 'over'), input: value });\r\n                            setTryCnt(tryCnt + 1);\r\n                            setUserInput('');\r\n                        }\r\n                    }}\r\n                />\r\n            </_Record>\r\n            <_Record backgroundColor='#e2e2e2'>\r\n                {historyJSXList}\r\n            </_Record>\r\n        </_Wrap>\r\n    );\r\n}\r\n\r\nexport default Play;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    /* background-color: #a8a8a8; */\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n`;\r\n\r\nconst _Info = styled.div`\r\n    width: calc(100% - 10px);\r\n    margin-left: 5px;\r\n    height: 90px;\r\n    border: solid 1px #acacac;\r\n    background-color: #dce6eb;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #6d6d6d;\r\n    text-align: left;\r\n    box-sizing: border-box;\r\n    padding: 3px;\r\n    overflow: auto;\r\n    /* & span {\r\n                    color: #db0000;\r\n    } */\r\n                `;\r\n\r\nconst _Form = styled.input`\r\n    font-size: 22px;\r\n    width: 100px;\r\n    height: 30px;\r\n    ${(props: { isError: boolean }) => props.isError ?\r\n        '' :\r\n        css`\r\n            background-color: #fff6a7;\r\n            color: red;\r\n        `\r\n    }\r\n`;\r\n\r\nconst _History = styled.div`\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    width: 100%;\r\n    border-radius: 3px;\r\n    border: solid 1px #d3d3d3;\r\n    height: 26px;\r\n    margin-top: 3px;\r\n    padding-left: 10px;\r\n    background-color: #f0f1f0;\r\n    box-sizing: border-box;\r\n    color: black;\r\n    text-align: left;\r\n    /* & span {\r\n                    color: #db0000;\r\n    } */\r\n`;","import { useState } from \"react\";\r\nimport { VFC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Play from \"./mode/Play\";\r\nimport Result from \"./mode/Result\";\r\nimport Top from \"./mode/Top\";\r\n\r\nexport enum PlayStatus {\r\n    TOP,\r\n    PLAY,\r\n    RESULT\r\n}\r\n\r\nexport type ResultBean = {\r\n    try: number;\r\n    correct: number;\r\n}\r\n\r\nconst Sample2: VFC = () => {\r\n\r\n    const [status, setStatus] = useState<PlayStatus>(PlayStatus.TOP);\r\n    const [range, setRange] = useState<number>(0);\r\n    const [resultBean, setResultBean] = useState<ResultBean>({} as ResultBean);\r\n\r\n    const getContentsJSX = (): JSX.Element => {\r\n        switch (status) {\r\n            case PlayStatus.TOP: return <Top\r\n                transitionPlay={(value: number) => {\r\n                    setStatus(PlayStatus.PLAY);\r\n                    setRange(value);\r\n                }}\r\n            />;\r\n            case PlayStatus.PLAY: return <Play\r\n                transitionResult={(_resultBean) => {\r\n                    setStatus(PlayStatus.RESULT);\r\n                    setResultBean(_resultBean);\r\n                }}\r\n                range={range}\r\n            />;\r\n            case PlayStatus.RESULT: return <Result\r\n                transitionTop={() => {\r\n                    setStatus(PlayStatus.TOP);\r\n                }}\r\n                resultBean={resultBean}\r\n            />\r\n            default: return <></>;\r\n        }\r\n    };\r\n\r\n    return (<>\r\n        <_Background>\r\n            <_MainPanel>\r\n                <_Record>\r\n                    <_Status isActive={status == PlayStatus.TOP}>\r\n                        <span>TOP</span>\r\n                    </_Status>\r\n                    <_Status isActive={status == PlayStatus.PLAY}>\r\n                        <span>PALY</span>\r\n                    </_Status>\r\n                    <_Status isActive={status == PlayStatus.RESULT}>\r\n                        <span>RESULT</span>\r\n                    </_Status>\r\n                </_Record>\r\n                <_ContentsPanel>\r\n                    {getContentsJSX()}\r\n                </_ContentsPanel>\r\n            </_MainPanel>\r\n        </_Background>\r\n    </>);\r\n}\r\n\r\nexport default Sample2;\r\n\r\n\r\nconst _Background = styled.div`\r\n    display: inline-block;\r\n    background-color: #bebebe;\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n`;\r\n\r\nconst _MainPanel = styled.div`\r\n    display: inline-block;\r\n    background-color: #e0dcdc;\r\n    /* border: solid 1px #9090902b; */\r\n    width: 400px;\r\n    height: calc(100% - 20px);\r\n    margin: 10px 0 0 10px;\r\n    border-radius: 5px;\r\n    text-align: left;\r\n`;\r\n\r\nconst _Record = styled.div`\r\n    display: inline-block;\r\n    background-color: #e4e4e4;\r\n    width: 100%;\r\n    height: 30px;\r\n    margin: 5px 0 0 0;\r\n    text-align: center;\r\n`;\r\n\r\nconst _Status = styled.div<{ isActive: boolean }>`\r\n    display: inline-block;\r\n    background-color: ${(props) => props.isActive ? '#c50000' : '#e7e7e7'};\r\n    width: 100px;\r\n    height: 26px;\r\n    text-align: center;\r\n    margin: 2px 0 0 5px;\r\n    transition: background-color 500ms;\r\n    & span {\r\n        display: inline-block;\r\n        font-size: 18px;\r\n        font-weight: 600;\r\n        color: #ffffff;\r\n        margin-top: 1px;\r\n        pointer-events: none;\r\n    }\r\n`;\r\n_Status.defaultProps = {\r\n    isActive: false\r\n}\r\n\r\nconst _ContentsPanel = styled.div`\r\n    display: inline-block;\r\n    background-color: #cfcfcf;\r\n    width: calc(100% - 6px);\r\n    height: calc(100% - 45px);\r\n    margin: 5px 0 0 3px;\r\n    border-radius: 2px;\r\n`;","import { useState, VFC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../component/Button\";\r\nimport { _Record, _Text } from \"../component/Style\";\r\nimport { PlayStatus, ResultBean } from \"../Sample2\";\r\n\r\n\r\nconst Result = (props: { transitionTop: () => void, resultBean: ResultBean }) => {\r\n\r\n    return (\r\n        <_Wrap>\r\n            <_Record\r\n                // backgroundColor=\"#00000011\"\r\n                textAlign=\"left\"\r\n                padding=\"10px 0 0 10px\"\r\n            >\r\n                <_Text fontSize=\"26px\" color=\"#464646\" fontWeight=\"600\">\r\n                    <_Text color=\"#008026\">\r\n                        Matched your number!<br /><br />\r\n                    </_Text>\r\n                    Try: [<_Text color=\"#a60000\">\r\n                        {props.resultBean.try}\r\n                    </_Text>]<br />\r\n                    Correct: [<_Text color=\"#a60000\">\r\n                        {props.resultBean.correct}\r\n                    </_Text>]<br /><br />\r\n                </_Text>\r\n            </_Record>\r\n            <_Record>\r\n                <Button\r\n                    labelName=\"Return\"\r\n                    backgroundColor=\"#b4b4b492\"\r\n                    width={200}\r\n                    height={50}\r\n                    fontColor=\"#8a8a8a\"\r\n                    fontSize={36}\r\n                    margin={[0, 0, 0, 0]}\r\n                    adjsustHead={-1}\r\n                    callback={() => {\r\n                        props.transitionTop();\r\n                    }}\r\n                />\r\n            </_Record>\r\n        </_Wrap>\r\n    );\r\n}\r\n\r\nexport default Result;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    /* background-color: #a8a8a8; */\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n`;","import { useState, VFC } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Button from \"../component/Button\";\r\nimport { _Record, _Text } from \"../component/Style\";\r\nimport { PlayStatus } from \"../Sample2\";\r\n\r\nconst Top = (props: { transitionPlay: (range: number) => void }) => {\r\n\r\n    const [range, setRange] = useState<number>(50);\r\n\r\n    const rangeOptionJSXList: JSX.Element[] = [];\r\n    [50, 100, 200, 500, 1000].forEach((value, i) => {\r\n        rangeOptionJSXList.push(\r\n            <option key={i} value={value}>{value}</option>\r\n        );\r\n    });\r\n    return (\r\n        <_Wrap>\r\n            <_Title><span>Kazuate React</span></_Title>\r\n            <_Record margin=\"20px 0 10px 0\">\r\n                <_Text fontSize=\"22px\" fontWeight=\"600\" color=\"#440202\">Range: 0～</_Text>\r\n                <_Combobox\r\n                    onChange={(e) => {\r\n                        setRange(parseInt(e.target.value));\r\n                    }}\r\n                >\r\n                    {rangeOptionJSXList}\r\n                </_Combobox>\r\n            </_Record>\r\n            <_Record margin=\"0 0 10px 0\">\r\n                <Button\r\n                    labelName=\"Start\"\r\n                    backgroundColor=\"#b4b4b492\"\r\n                    width={200}\r\n                    height={50}\r\n                    fontColor=\"#8a8a8a\"\r\n                    fontSize={36}\r\n                    margin={[0, 0, 0, 0]}\r\n                    adjsustHead={-1}\r\n                    callback={() => {\r\n                        props.transitionPlay(range);\r\n                    }}\r\n                />\r\n            </_Record>\r\n        </_Wrap>\r\n    );\r\n}\r\n\r\nexport default Top;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    /* background-color: #a8a8a8; */\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n`;\r\n\r\nconst _Title = styled.div`\r\n    display: inline-block;\r\n    /* background-color: #ffffff1f; */\r\n    height: 30px;\r\n    text-align: center;\r\n    margin: 35px 0 20px 0;\r\n    & span {\r\n        display: inline-block;\r\n        font-size: 35px;\r\n        font-weight: 600;\r\n        color: #b10000;\r\n        margin-top: -5px;\r\n    }\r\n`;\r\n\r\nconst _Combobox = styled.select`\r\n    font-size: 22px;\r\n    width: 100px;\r\n    height: 30px;\r\n`;","\nimport Sample2 from 'app/sample/sample2/Sample2';\nimport { VFC } from 'react';\n\nconst App: VFC = () => {\n  return (\n    <Sample2 />\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}